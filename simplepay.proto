syntax = "proto3";

package MyJetWallet.SimplePay;

import "google/protobuf/empty.proto";

message HelloMessage {

  string Message = 1;

}

/*
 * ====================================================
 * Simple Pay API - Data Model
 * ====================================================
 */

// contact who can be receive payments from us. Or who can be sender of payments by invoice
message SimplePayContact
{
  string Id = 1;
  string Name = 2;
  optional int64 GroupId = 3;
  optional string Description = 4;
  string AssetSymbol = 5;
  string NetworkId = 6;
  string BlockchainAddress = 7;
  optional string BlockchainTag = 8;

  string Workspace = 100;           // identify workspace id for request
}

// Blockchain network description
message SimplePayBlockchain
{
  string NetworkId = 1;
  string Name = 2;
  bool IsTagSupported = 3;
}

// Asset description with supported networks
message SimplePayAsset
{
  string Symbol = 1;
  string Name = 2;
  string IconUrl = 3;
  repeated string DepositNetworks = 4;
  repeated string TransferNetworks = 5;

}

// Blockchain address description
message SimplePayAddress
{
  string AssetSymbol = 1;
  string NetworkId = 2;
  string Address = 3;
  optional string Tag = 4;

  string Workspace = 100;           // identify workspace id for request
}

message SimplePayAddressResponse
{
  ResultCodes Result = 1001;
  optional string Message = 1002;

  SimplePayAddress Address = 1;
}

// workspace balance
message SimplePayBalance
{
  string AssetSymbol = 1;
  string Balance = 2;
  string BalanceInUsd = 3;
}

enum TransferStatus
{
  Draft = 0;
  Pending = 1;
  InProgress = 2;
  Completed = 3;
  Cancelled = 4;
  PartiallyCompleted = 5;
}

message SimplePayTransfer
{
  string Id = 1;                    // server-side unique id of the transfer
  string StatementName = 2;         // client-side unique id of transfer. Will be use as settlement name
  string ContactId = 3;             // receiver contact Id
  string Comment = 4;               // comment for payment
  TransferStatus Status = 5;        // status of the transfer

  string AssetSymbol = 10;           // payment asset (should be same with contact billing asset)

  string PaymentAmount = 11;         // crypto total amount to pay
  string FeeAmount = 12;             // crypto fee amount
  string TransactionAmount = 13;     // crypto amount to send in transaction (after pay fee)
  string SettleAsset = 14;           // asset that will be delivered to the recipient
  string SettleAmount = 15;          // amount that will be delivered to the recipient
  string Timestamp = 16;             // timestamp of the transfer

  string Workspace = 100;           // identify workspace id for request
}

message SimplePayStatement
{
  string Id = 1;                    // server-side unique id of the statement
  string Name = 2;                  // client-side unique id/name of the statement
  string Description = 3;           // description of the statement
  string LastUpdate = 4;            // timestamp of the statement last update
  TransferStatus Status = 5;        // status of the statement and transfers

  repeated SimplePayTransfer Transfers = 10;

  string Workspace = 100;           // identify workspace id for request  
}


/*
 * ====================================================
 * Simple Pay API - Request Models
 * ====================================================
 */

message SimplePayWorkspaceDto // workspace id request
{
  ResultCodes Result = 1001;
  optional string Message = 1002;

  string Workspace = 100;           // identify workspace id for request
}

message WorkspaceCreateRequest
{
  string ExternalUniqueId = 1;      // external unique id of the workspace. Will be use to generate simple pay id
}

message SimplePayIdDto
{
  string Id = 1;

  string Workspace = 100;           // identify workspace id for request
}

message SimplePayNameDto
{
  string Name = 1;

  string Workspace = 100;           // identify workspace id for request
}

message SimplePayAssetAndNetworkDto
{
  string AssetSymbol = 1;
  string NetworkId = 2;

  string Workspace = 100;           // identify workspace id for request
}

message SimplePayTransferRequest
{
  string StatementName = 2;         // client-side unique id of transfer. Will be use as settlement name
  string ContactId = 3;             // receiver contact Id
  string Comment = 4;               // comment for payment

  string AssetSymbol = 10;           // payment asset (should be same with contact billing asset)

  // specify one of the following fields to define Amount of the payment
  optional string PaymentAmount = 11;         // crypto total amount to pay
  optional string TransactionAmount = 13;     // crypto amount to send in transaction (after pay fee)
  optional string SettleAsset = 14;           // asset that will be delivered to the recipient
  optional string SettleAmount = 15;          // amount that will be delivered to the recipient

  string Workspace = 100;           // identify workspace id for request
}

message SimplePayWorkspaceCreateRequest
{
  string Workspace = 100;           // identify workspace id for request
}


/*
 * ====================================================
 * Simple Pay API - Response Models
 * ====================================================
 */

enum ResultCodes {
  Unauthorized = 0;
  InternalError = 1;
  OK = 10;
  InvalidAddress = 11;
  InvalidTag = 12;
  ContactNotFound = 13;
  ContactGroupNotFound = 14;
  AssetNotFound = 15;
  BlockchainNotFound = 16;
  StatementAlreadyExists = 17;
  StatementNotFound = 18;
}

message SimplePayResponse
{
  ResultCodes Result = 1001;
  optional string Message = 1002;
}

message SimplePayContactResponse
{
  ResultCodes Result = 1001;
  optional string Message = 1002;

  SimplePayContact Contact = 1;
}

message SimplePayContactListResponse
{
  ResultCodes Result = 1001;
  optional string Message = 1002;

  repeated SimplePayContact Contacts = 1;
}

message SimplePayAssetListResponse
{
  ResultCodes Result = 1001;
  optional string Message = 1002;

  repeated SimplePayAsset Assets = 1;
}

message SimplePayBlockchainListResponse
{
  ResultCodes Result = 1001;
  optional string Message = 1002;

  repeated SimplePayBlockchain Blockchains = 1;
}

message SimplePayBalanceListResponse
{
  ResultCodes Result = 1001;
  optional string Message = 1002;

  repeated SimplePayBalance Balances = 1;
}

message SimplePayAddressValidationResponse
{
  ResultCodes Result = 1001;
  optional string Message = 1002;
  bool IsSimple = 3;               // is address simple address and transfer will be internal
}

message SimplePayTransferPreviewResponse
{
  ResultCodes Result = 1001;
  optional string Message = 1002;

  string ContactId = 3;             // receiver contact Id

  string AssetSymbol = 10;           // payment asset (should be same with contact billing asset)
  string PaymentAmount = 11;         // crypto total amount to pay
  string FeeAmount = 12;             // crypto fee amount
  string TransactionAmount = 13;     // crypto amount to send in transaction (after pay fee)
  string SettleAsset = 14;           // asset that will be delivered to the recipient
  string SettleAmount = 15;          // amount that will be delivered to the recipient
}

message SimplePayStatementResponse
{
  ResultCodes Result = 1001;
  optional string Message = 1002;

  SimplePayStatement Statement = 1;
}

message DepositHistoryRequest
{
  string AssetSymbol = 1;
  int32 Take = 2;
  string LastSeenId = 3;
  string FromTimestamp = 4;
  string ToTimestamp = 5;

  string Workspace = 100;           // identify workspace id for request
}

message DepositHistoryResponse
{
  ResultCodes Result = 1001;
  optional string Message = 1002;

  repeated SimplePayDeposit Deposits = 1;
}

message SimplePayDeposit
{
  string Id = 1;
  string AssetSymbol = 2;
  string NetworkId = 3;
  string Amount = 6;
  string Timestamp = 7;
  optional string Txid = 8;
  TransferStatus Status = 9;
  optional string ExplorerUrl = 10;
  bool IsInternal = 11;

  string Workspace = 100;
}

message AddCallbackRequest
{
  string Url = 1;

  string Workspace = 100;
}

message CallbackResponse
{
  ResultCodes Result = 1001;
  optional string Message = 1002;
}

message GetCallbacksRequest
{
  string Workspace = 100;
}

message DisableCallbackRequest
{
  string Id = 1;

  string Workspace = 100;
}

message CallbackListResponse
{
  ResultCodes Result = 1001;
  optional string Message = 1002;

  repeated CallbackModel Callbacks = 1;
}

message CallbackModel
{
  string Id = 1;
  string Url = 2;
  string CreatedTs = 3;

  string Workspace = 100;
}

/*
 * ====================================================
 * Simple Pay API - Service
 * ====================================================
 */

service SimplePayClientGrpc {

  rpc Hello (HelloMessage) returns (HelloMessage);  // check the connection
  rpc WhoIAm (.google.protobuf.Empty) returns (SimplePayResponse); // check the connection and authentication

  rpc DictionaryGetAllAssets(.google.protobuf.Empty) returns (SimplePayAssetListResponse); // get all assets
  rpc DictionaryGetAllBlockchains(.google.protobuf.Empty) returns (SimplePayBlockchainListResponse); // get all blockchains

  rpc WorkspaceCreate(WorkspaceCreateRequest) returns (SimplePayWorkspaceDto); // create new workspace on the account
  // get workspaces

  rpc AccountGetAllBalances(SimplePayWorkspaceDto) returns (SimplePayBalanceListResponse); // get all balances
  rpc AccountGetDepositAddress(SimplePayAssetAndNetworkDto) returns (SimplePayAddressResponse); // get deposit address for asset and network

  rpc ContactCreate(SimplePayContact) returns (SimplePayContactResponse); // create contact and return it with Id
  rpc ContactUpdate(SimplePayContact) returns (SimplePayContactResponse); // update existing contact and return it
  rpc ContactDelete(SimplePayIdDto) returns (SimplePayResponse);     // delete contact by Id
  rpc ContactGetById(SimplePayIdDto) returns (SimplePayContactResponse);  // get contact by Id
  rpc ContactGetAllContactStream(SimplePayWorkspaceDto) returns (stream SimplePayContact); // get all contacts as stream. Exception in unauthorised case
  rpc ValidateAddress(SimplePayAddress) returns (SimplePayAddressValidationResponse); // validate blockchain address

  rpc SingleTransferPreview(SimplePayTransferRequest) returns (SimplePayTransferPreviewResponse); // preview transfer amounts and fee
  rpc SingleTransferExecute(SimplePayTransferRequest) returns (SimplePayStatementResponse); // make and execute statement with single transfer
  rpc StatementGetById(SimplePayIdDto) returns (SimplePayStatementResponse); // make and execute statement with single transfer
  rpc StatementGetByName(SimplePayNameDto) returns (SimplePayStatementResponse); // make and execute statement with single transfer

  rpc GetDepositHistory(DepositHistoryRequest) returns (DepositHistoryResponse); // get deposit history by filter

  rpc AddCallbackDeposit(AddCallbackRequest) returns (CallbackResponse); // add deposit to the history
  rpc AddCallbackPayment(AddCallbackRequest) returns (CallbackResponse); // add payment to the history
  rpc AddCallbackBalance(AddCallbackRequest) returns (CallbackResponse); // add balance to the history
  rpc ListEnabledCallbacks(GetCallbacksRequest) returns (CallbackListResponse); // get list of enabled callbacks
  rpc DisableCallback(DisableCallbackRequest) returns (CallbackResponse); // disable callback by id

  // create workspace
  // get payment by id
  // get payment history stream (filter)
  // callback payment
  // callback deposit
  // deposit history stream (by id or by filter)
  
}